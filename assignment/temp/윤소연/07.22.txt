[[[[[[[[[[[[[[ 07/22 classes ]]]]]]]]]]]]]]]

*클래스(class)란 똑같은 무언가를 계속 만들어 낼 수 있는 설계 도면(과자 틀),
객체(object)란 클래스로 만든 피조물(과자 틀로 찍어 낸 과자)을 뜻한다.

*클래스로 만든 객체를 ‘인스턴스’라고도 한다. 그렇다면 객체와 인스턴스의 차이는 무엇일까?
이렇게 생각해 보자. a = Cookie()로 만든 a는 객체이다. 그리고 a 객체는 Cookie의 인스턴스이다.
즉, 인스턴스라는 말은 특정 객체(a)가 어떤 클래스(Cookie)의 객체인지를 관계 위주로 설명할 때 사용한다.
‘a는 인스턴스’보다 ‘a는 객체’라는 표현이 어울리며 ‘a는 Cookie의 객체’보다 ‘a는 Cookie의 인스턴스’라는 표현이 훨씬 잘 어울린다.

*self는 인스턴스를 지칭하지 않고 클래스 자체를 지칭

*클래스 안에 구현된 함수는 다른 말로 메서드(method)라고 부른다.
앞으로 클래스 내부의 함수는 항상 메서드라고 표현할 테니 메서드라는 용어를 기억해 두자.

*a.first = 4라는 문장이 수행되면 a 객체에 객체변수 first가 생성되고 4라는 값이 저장된다.
이와 마찬가지로 a.second = 2라는 문장이 수행되면 a 객체에 객체변수 second가 생성되고 2라는 값이 저장된다.
객체에 생성되는 객체만의 변수를 ‘객체변수’ 또는 ‘속성’이라고 부른다.
*클래스로 만든 객체의 객체변수는 다른 객체의 객체변수에 상관없이 독립적인 값을 유지한다. 클래스에서는 이 부분을 이해하는 것이 가장 중요하다.

1). 어노테이션, 데코레이터

@어노테이션 : 인터프리터나 컴파일러한테 명시적으로 알려준다
@데코레이터 : 꾸며주는 함수
- 함수 데코레이터
                @데코레이터
                def asdf(a):
                    return a
- 클래스 데코레이터 (클래스의 메소드를 꾸며준다. 그래서 class 다음에 나온다)
                class 클래스명:
                @데코레이터
                    def

    @property
    @discounts.setter #discounts 자리에 들어가는 걸 필드라고 함.
    @staticmethod
    @classmethod
    ...

-- 파이썬 미리 만들어 둔 데코레이터 ex). @property
-- 내가 만들어쓰는 사용자 데코레이터


2) 클래스 구성
    접근제한자 : 파이썬 없다. 개발자가 알아서.. 자바의 이야기
        (자바)
        4개의 종류가 있다. public > protected > default > private(제일 제한적임)
    검증
    값: 필드 (마음대로 바꿀 순 없음)

    기능 : 함수(메소드)

        겟터(getter):객체의 속성 값을 가져오는 메서드
        셋터(setter): 객체의 속성 값을 설정하는 메서드
        - 겟터와 셋터를 통해 속성 접근을 제어하고 캡슐화를 구현할 수 있습니다.
            @property(겟터)


        *롬복(lombok): 자바에서 반복적인 코드를 줄여주는 라이브러리,파이썬에는 없단다.


3) 예시

class Book:

    def __init__(self, raw_price):
        if raw_price < 0:
            raise ValueError('price must be positive')
        # 이 코드는 raw_price가 0보다 작으면 ValueError 예외를 발생시키라는 의미입니다.음수일 때 허용하지 않고 예외를 발생시켜라
        self.raw_price = raw_price
        # 생성자 메서드에서 객체가 생성될 때 전달된 raw_price 값을 객체의 인스턴스 변수 raw_price에 할당하는 단계입니다.
        # 이를 통해 raw_price 값이 객체의 속성으로 저장됩니다.
        self._discounts = 0

        @property
        def discounts(self): #게터 메서드
            return self._discounts
        @discounts.setter
        def discounts(self, value): #세터 메서드는 두 개의 인수를 받아
            if value < 0 or 100 < value:
                raise ValueError(
                    '가격잘못됨')
            self._discounts = value

        @property
        def price(self):
            multi = 100 - self._discounts
            return int(self.raw_price * multi / 100)

메소드 오버로드 오버로딩 : 같은 이름의 메소드가 쓰이는 이유
입력이나 출력이 다르면 구별할 수 있기 때문에

메소드 오버라이드 오버라이딩 : 부모가 정의한 메소드를 상속받은 자식에서 재정의

----main.py
from sec06.book import Book
from helpers.debug import *

if __name__ == "__main__":
    책01 = Book(2000) #구체화된 객체인 인스턴스를 만들었다
    pp(책01.raw_price)
    pp(책01._discounts)

4) 언더스코어 2개로 시작하는 속성
속성(어트리뷰트) : 값 벨류, 프라피티, 필드, 기능, (연관) 함수, 메소드(던더메소드, 사용자메소드)
(init이 대표적이야)

# 언더스코어의 역할 은닉..
        self._asdf = 3000
        self.__asdf2 = 30000

 main에서
    print(book._asdf) #비공식적인 은닉이래
    print(book.__asdf2) #이건 위와 달리 안 잡혀야 정상

 => 클래스 내부의 데이터나 메서드를 보호하고, 사용자가 의도치 않게 클래스 내부 세부사항을 변경하지 않도록 도와줍니다.

5) 예시 2
class Page:
    book_title = 'Python Practice Book'
    def __init__(self, num, content): #생성자
        self.num = num #인스턴스변수
        self.content = content #인스턴스변수
    def output(self):
        return f'{self.content}'
    # 클래스 메서드의 첫 번째 인수는 클래스 객체
    @classmethod
    def print_pages(cls, *pages): #관례적으로 cls라 씀. pages란 클래스 객체를 인수로 받고 있음
        # 클래스 객체 이용
        print(cls.book_title)
        pages = list(pages)
        # 페이지 순으로 정렬해서 출력
        for page in sorted(pages, key=attrgetter('num')):
            print(page.output())

6) 클래스메서드(cls) =/= 인스턴스메서드(self)
class Book:  # 클래스 변수와 클래스메서드만 일단 만들어보자
    count = 0  # 클래스 변수를 만든 상태

    @classmethod  # 클래스메서드란 걸 알려줘야 함
    def 만들어진책카운트(cls):  # 클래스메서드 #self는 class내는 인스턴스 생성하는 게 일반적이라~
        cls.count += 1
        return Book.count

    def __init__(self):
        pass

-----main
if __name__ == "__main__":
    책01 = Book()
    책02 = Book()
    책03 = Book()
    Book.만들어진책카운트()
    Book.만들어진책카운트()
    Book.만들어진책카운트()
    a = Book.만들어진책카운트()
    pp(a)


7)

*인스턴스 메서드 (@staticmethod와 @classmethod와 구별됨) #인스턴스가 없으면 호출할 수 없습니다.
*클래스 메서드 (@classmethod) #클래스 이름을 통해 호출하거나 인스턴스를 통해 호출할 수 있습니다. 인스턴스가 없어도 호출할 수 있습니다.
*정적 메서드 (@staticmethod) #클래스나 인스턴스와 관련이 없는 독립적인 메서드입니다. 첫 번째 인수로 self나 cls를 받지 않습니다.
클래스 이름이나 인스턴스를 통해 호출할 수 있습니다. 유틸리티성 메서드 (특정 클래스나 모듈의 기능과 직접적으로 연관되지 않고,
주로 일반적인 작업이나 도움을 주기 위한 메서드를 말합니다. 이러한 메서드는 특정 클래스의 인스턴스나 클래스 변수에 의존하지 않고,
독립적인 작업을 수행하거나 공통적인 기능을 제공하는 데 사용됩니다.)


[정적 메서드 예시]
class Page:
    def __init__(self, num, content):
        self.num = num
        self.content = content
    @staticmethod  # 스태틱 메서드로 정의
    def check_blank(page):
        return bool(page.content)


class 사칙연산:
    @staticmethod
    def 덧셈(a,b):
        return a+b

    def 뺄셈(a, b):
        return a - b

    def 곱셈(a, b):
        return a * b

    def 나눗셈(a, b):
        return a / b

-----main
from sec06.book import 사칙연산
from helpers.debug import *

if __name__ == "__main__":

    pp(사칙연산.덧셈(10,2))
    pp(사칙연산.뺄셈(10,2))
    pp(사칙연산.곱셈(10,2))
    pp(사칙연산.나눗셈(10,2))


8) 클래스 상속
#다중 상속
class 학생클래스 extends 부모클래스, 선생님클래스....

값과 기능을 가져올 수 있는 것. 상속한다. 새로 정의해주는 게 귀찮잖아. 메서드 오버라이드와 super()를 사용한 베이스 클래스로의 접근

class Page:
    def __init__(self, num, content):
        self.num = num
        self.content = content
    def output(self):
        return f'{self.content}'
[위의 클래스 상속받아옴]
# 메서드 오버라이드
class TitlePage(Page):
    def output(self):
        # 베이스 클래스의 메서드는 자동으로 호출되지 않으므로
        # 명시적으로 호출함
        title = super().output()
*베이스 클래스: 다른 클래스들이 상속받는 기본 클래스입니다. 공통적인 속성과 메서드를 정의하여 이를 상속받는 자식 클래스들이 이를 재사용할 수 있도록 합니다.

*super()는 파이썬에서 상속 구조를 사용할 때 부모 클래스의 메서드를 호출하는 데 사용되는 내장 함수

#다중 상속을 하면

9) 둘 다 클래스 설계에서 일정한 규칙과 계약을 정의하기 위해 사용됩니다. 그러나 그 사용 목적과 방식에서 차이가 있습니다.

추상 클래스 (Abstract Class)
정의: 하나 이상의 추상 메서드(구현되지 않은 메서드)를 포함하는 클래스입니다.
목적: 자식 클래스에서 반드시 구현해야 하는 메서드를 정의하여 일정한 규약을 강제합니다.
특징:
직접 인스턴스를 생성할 수 없습니다.
공통된 속성이나 구현된 메서드를 포함할 수 있습니다.
자식 클래스는 추상 클래스의 추상 메서드를 반드시 구현해야 합니다.

인터페이스 (Interface)
정의: 클래스가 구현해야 하는 메서드 목록을 정의하는 계약(규약)입니다. 메서드의 시그니처(이름, 매개변수, 반환 타입)만 정의하며, 실제 구현은 포함하지 않습니다.
목적: 특정 기능을 제공하기 위해 클래스가 따라야 하는 규칙을 정의합니다.
특징:
모든 메서드는 구현되지 않은 상태로 정의됩니다.
파이썬에는 명시적인 인터페이스 기능이 없지만, 추상 클래스를 사용하여 비슷한 개념을 구현할 수 있습니다.
일반적으로 다형성을 지원하고, 특정 기능을 여러 클래스에서 구현하도록 강제합니다.

주요 차이점
구현 여부:
추상 클래스: 추상 메서드 외에도 구현된 메서드와 속성을 가질 수 있습니다.
인터페이스: 모든 메서드는 구현되지 않은 상태로 정의됩니다(파이썬에서는 추상 클래스로 비슷하게 구현).

목적:
추상 클래스: 공통된 속성이나 기본 구현을 제공하면서, 특정 메서드를 자식 클래스에서 반드시 구현하게 하려는 목적.
인터페이스: 특정 기능을 제공하기 위해 클래스가 따라야 하는 규칙을 정의하려는 목적.

사용 방법:
추상 클래스: 파이썬에서는 ABC 클래스와 @abstractmethod 데코레이터를 사용하여 정의.
인터페이스: 파이썬에서는 명시적인 인터페이스 기능이 없지만, 추상 클래스를 통해 인터페이스와 유사한 역할을 구현.

요약
추상 클래스: 하나 이상의 추상 메서드가 포함된 클래스. 자식 클래스가 반드시 구현해야 하는 메서드를 정의하며, 공통된 속성이나 메서드를 가질 수 있음.
인터페이스: 클래스가 구현해야 하는 메서드 목록만을 정의한 계약. 모든 메서드는 구현되지 않은 상태로 정의되며, 특정 기능을 여러 클래스에서 구현하도록 강제함.
두 개념을 통해 코드의 구조를 명확히 하고, 다형성을 지원하며, 유지보수를 용이하게 할 수 있습니다.


from abc import ABC, abstractmethod

class Printable(ABC):  # 인터페이스 역할을 하는 추상 클래스
    @abstractmethod
    def print(self):  # 추상 메서드
        pass

class Document(Printable):  # 구체적인 클래스
    def print(self):
        return "Printing document..."

doc = Document()
print(doc.print())  # 출력: Printing document...



[[[[[[[[[[ modules ]]]]]]]]]]

*모듈이란 함수나 변수 또는 클래스를 모아 놓은 파이썬 파일이다. 모듈은 다른 파이썬 프로그램에서 불러와 사용할 수 있도록 만든 파이썬 파일이라고도 할 수 있다.

1) base64
base64 모듈은 파이썬에서 데이터를 Base64 인코딩 및 디코딩하는 기능을 제공하는 내장 모듈입니다.
Base64 인코딩은 바이너리 데이터를 텍스트 형식으로 변환하는 방법으로, 바이너리 데이터를 텍스트 기반 프로토콜(예: 이메일)로 전송하거나 저장할 때 유용합니다.

주요 기능
Base64 인코딩:
바이너리 데이터를 ASCII 문자열로 변환합니다.
인코딩된 데이터는 알파벳 대소문자, 숫자, '+', '/' 문자와 '=' 패딩 문자로 구성됩니다.

Base64 디코딩:
Base64로 인코딩된 ASCII 문자열을 원래의 바이너리 데이터로 변환합니다.

import base64
    base64.~~

2) 패키지 안의 모듈 임포트
#패키지 속에 모듈이 길이가 있다면 이렇게 불러오자
from b64.encoder import str_to_base64

3) __init__.py ── 패키지 초기화 수행
-> 적극적으로도 사용 가능

*파이썬의 sys 모듈은 파이썬 인터프리터와 상호작용하는 다양한 기능을 제공하는 내장 모듈입니다.
주로 인터프리터의 환경 설정, 명령 줄 인수 처리, 표준 입출력 스트림 관리 등과 관련된 작업을 수행할 때 사용됩니다.

4) sys.path 모듈 경로 관리 (sys.path):
from pathlib import Path

#경로를 다룰 일이 많아 이걸 많이 사용해 옴

5) 경로

현재 작업 폴더 얻기
os.getcwd()를 사용하여 얻습니다. (get current working directory)

 print(os.getcwd())# /Users/evan/dev/python/web-crawler-py/parsed_data


디렉터리 변경
os.chdir(path)를 사용합니다. (path는 문자열 이어야 함.)

 os.chdir("/Users")
 print(os.getcwd())# /Users


특정 경로에 대해 절대 경로 얻기
os.path.abspath(path)

 print(os.path.abspath("web-crawler-py/parsed_data"))
 # /Users/evan/dev/python/web-crawler-py/parsed_data/web-crawler-py/parsed_data


경로 중 디렉토리명만 얻기
os.path.dir(path)

 print(os.path.dirname("/Users/evan/dev/python/web-crawler-py/parsed_data"))
 # Users/evan/dev/python/web-crawler-py


경로 중 파일명만 얻기
os.path.basename(path)

 print(os.path.basename("/Users/evan/dev/python/web-crawler-py/parsed_data"))
 # parsed_data


경로 중 디렉토리명과 파일명 나누어 얻기
os.path.split(path) 디렉토리명, 파일명이 리스트 형태로 나옵니다.

 dir, file = os.path.split("/Users/evan/dev/python/web-crawler-py/parsed_data")
 print(dir, file, sep="\n")
 # /Users/evan/dev/python/web-crawler-py
 # parsed_data


파일 경로를 리스트로 얻기
파일 경로를 os.path.sep(OS별 파일 경로 나는 문자)를 이용해 split 합니다.

 print("/Users/evan/dev/python/web-crawler-py/parsed_data".split(os.path.sep))
 # ['', 'Users', 'evan', 'dev', 'python', 'web-crawler-py', 'parsed_data']


경로를 병합하여 새 경로 생성
os.path.join(path, path1, path2,...) 넘겨준 path들을 묶어 하나의 경로로 만들어줍니다.

 print(os.path.join("/Users/evan/dev/python/web-crawler-py/parsed_data", "test"))
 # /Users/evan/dev/python/web-crawler-py/parsed_data/test


디렉터리 안의 파일/서브 디렉토리 리스트
os.listdir(path) path 하위에 있는 파일, 디렉토리 리스트를 보여줍니다.

print(os.listdir("/Users/evan/dev/python/web-crawler-py/parsed_data"))
# ['migrations', 'models.py', '__init__.py', '__pycache__', 'apps.py', 'parser.py', 'admin.py', 'tests.py', 'views.py']


파일 혹은 디렉터리가 존재하는지 체크
os.path.exists(path)

print(os.path.exists("/Users/evan/dev/python/web-crawler-py/parsed_data"))
# Trueprint(os.path.exists("/Users/evan/dev/python/web-crawler-py/parsed_data/admin.py"))# True


디렉토리가 존재하는지 체크
os.path.isdir(path)

print(os.path.isdir("/Users/evan/dev/python/web-crawler-py/parsed_data"))
# Trueprint(os.path.isdir("/Users/evan/dev/python/web-crawler-py/parsed_data/admin.py"))# False


파일이 존재하는지 체크
os.path.isfile(path)

print(os.path.isfile("/Users/evan/dev/python/web-crawler-py/parsed_data"))
# Falseprint(os.path.isfile("/Users/evan/dev/python/web-crawler-py/parsed_data/admin.py"))# True


파일의 크기
os.path.getsize(path)

print(os.path.getsize("/Users/evan/dev/python/web-crawler-py/parsed_data"))
# 352

출처: https://saysimple.tistory.com/m/158 링크

----- main 예시 (절대경로)
from helpers.debug import *
import sys
from pathlib import Path
import os

if __name__ == "__main__":
    텍스트파일 = Path(r"C:\workspace\project1\기록.txt")  #경로 copy -> copy 밑의 copy path/reference -> absolute ~ 복사)
    print(텍스트파일.absolute()) #절대경로
    print(os.path.abspath(r"C:\workspace\project1\기록.txt"))

    # 절대경로(Absolute Path)는 파일 시스템에서 파일이나 디렉토리의 위치를 명확하게 지정하는 경로입니다.
    # 절대경로는 파일 시스템의 루트 디렉토리부터 시작하여 파일이나 디렉토리까지의 전체 경로를 포함합니다.
    # 이는 파일의 위치를 유일하게 식별할 수 있게 해주므로, 현재 작업 디렉토리에 상관없이 항상 동일한 위치를 가리킵니다.