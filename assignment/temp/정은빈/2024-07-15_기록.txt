[ 07.15 (월) ]

#진입점

#파이썬 인터프리터가 이 파일을 직접 실행시키면
if__name__=="__main__":
    print("안녕")

----------------------

#function 대신 definition

#선언부
def 처음만든함수():
    return "1장"
#문자열을 return했다는 의미

#파이썬 인터프리터가 이 파일을 직접 실행시키면
if __name__== "__main__":
    #호출
    결과= 처음만든함수()
    print(결과)

-------------------------

from first_section.variable import 처음만든함수
#py가 생략되어 있음. py파일.
#함수 혹은 클래스를 가져온다.
#함수-소문자 시작, 클래스-대문자 시작

---------------------

#init이 있어야 패키지라는 인식이 가능하다.

#모듈: .py 파일 자체
#패키지: .py 파일의 모임

------------------------


variable.py

#함수 -> 클래스화

#클래스 안에 있는 함수를 메소드 한다
#클래스는 바로 쓸 수도 있으나, 인스턴스화를 하여 써야한다.

#_언더스코어 __더블언더스코어(던더)
class FirstSection:
    def __init__(self):
        pass
    def 처음만든함수(self):
        #인스턴스 메소드는 self를 가지고 있어야 함
        return "1장"

main.py

from first_section.variable import FirstSection

if __name__== "__main__":
    fs = FirstSection()
    결과 = fs.처음만든함수()
    print(결과)

--------------------------------

#언더스코어 __더블언더스코어(던더)
#언더스코어: 상수, 변경하지마세요, 특별한 것
#던더메소드/스페셜메소드/매직메소드(공식명칭) ex) __import__

------------------

동적타입언어 ()변수 -> 타입에 대해서 보다 자유로운 언어
정적타입언어 타입 변수

[] 대괄호
{} 중괄호
() 괄호
<>

-------------------------

cmd+opt+L -> formatting: 포멧을 정돈해준다

---------------------------


section2


import os

class Sec02_01:

#파이썬생성
#배터리인클루디드: 배터리가 들어있다
    @staticmethod
    def Sec02_01_01():
        print(os.environ)
#path: os에게 경로를 알려준다

-----------------------------------

하이픈
-- 풀네임 --
- 축약 - version

-------------------------------------

두번째.py


import os

class Sec02_01:
    @staticmethod
    def Sec02_01_01():
        print(os.environ)
        #path: os에게 경로를 알려준다

    @staticmethod
    def Sec02_01_02():
        print(os.getcwd())





main.py


from Sec02.두번째 import Sec02_01

if __name__== "__main__":
   Sec02_01.Sec02_01_01()
   Sec02_01.Sec02_01_02()

------------------------------------

bebug.py

def pp(*items):
    for item in items:
        print(item)
        print("======>", type(item))
    import sys
    sys.exit()


두번째.py

import os
from helpers.debug import *
class Sec02_01:
    @staticmethod
    def Sec02_01_01():
        print(os.environ)
        #path: os에게 경로를 알려준다

    @staticmethod
    def Sec02_01_02():
        print(os.getcwd())

    @staticmethod
    def Sec02_01_03():
        """
        내장함수 builtin function: 내가 정의하지 않음. 미리 만들어 놓음. 타입을 확인해준다.
        """
        pp("asdfasdfasdf")
        print(os.getcwd())
        #print: 대표적인 내장함수



main.py

from Sec02.두번째 import Sec02_01

if __name__== "__main__":
   Sec02_01.Sec02_01_01()
   Sec02_01.Sec02_01_02()
   Sec02_01.Sec02_01_03() #type

-------------------------------

# 원시타입, 프리미티브타입, 레퍼런스타입
        # 원시타입
        : int, float, bool, str

        # 원시타입은 타입캐스팅
        # 파이썬은 동적 타입 -> 변화함). 암묵적(묵시적)변환 ->타입캐스팅 type casting
        # 개발자는 명시적 변환 -> 타입컨버전 type conversion

         a = "100"
        pp(a)
        a = int(a) # 명시적으로 바꿔주는 것
        pp(a)
        pp(dir("문자열"))
        # dir: 객체가 가지고 있는 속성 기능을 리스트 타입으로 리턴해준다.
        # IDE integrated development environment 통합개발환경
        "문자열".
        # 객채의 속성은 .을 이용하여 참고할 수 있음

>>> : 대화형 인터프리터