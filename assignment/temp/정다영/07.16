07.16
# 모듈을 스크립트로 실행
-m이라는 명령어는 모듈을 인식 파이썬이 설치된 부분에 풀 경로로 설치
- everything이라는 툴을 이용
- unitest모듈을 통해서 test_hello를 실행시켜라라는 의미.
- python -m pip.py
- pip install pandas

# python 버전에 따른 차이가 있음.

# 3장
alt + j - 같은 언어 한번에 클릭
ctrl + shift + n 누르고 main치면  원하는 곳으로 빠르게 이동 가능
 들여쓰기는 사실 스페이스바이지만 에디터가 탭으로 해줌.
 예전에는 스페이스바로 연결 \t 가 아닌 사실 스페이스바 4칸임.
 들여쓰기는 문법이기에 잘 안해주면 syntax(문법) 에러가 발생.
여러 번수를 한 번에 할당하는 것이 상황에 따라 좋긴 하지만 처음 코딩할 경우 지양하기.
파이썬은 따로 타입 선언을 안함. (파이썬의 인터프리터가 타입을 유추하기 때문에)
변수 선언 시 typehint가 가능하긴 함.
typehint를 주는 이유는 해석 전 오류나 가독성을 높이기 위함.
char 문자열 하나
명시적 타입 변환
일부는 타입 캐스팅하거나 아님 오류를 띄워줌.
# 양쪽 모두 숫자값 타입으로 연산함
여기의 + 연산자는 좌항 우항이 모두 필요한 이항 연산자임.
i + int(s)
# 양쪽 모두 숫자값 타입으로 연산함
여기의 +는 문자열에(str + str) 적용되는 연산자임.
str(i) + s
# ollama
 윈도우 터미널 ollama pull llama3
 ollama list
 llama3

 ollama run llama3

 ollama pull starcoder2
 ollama run starcoder2

 voscode에서 확장에서 continue에서 통합시켜서 사용하면 됨.
 제어문
    분기문
       조건문if
       (goto)
       ...
    반복문
        for
        while
        foreach
        for in
        loop
        ...
    점프문(dfdf)
        continue
        break
        ...

 분기문 속에 조건문(if문)이 있음
 파이썬에서는 ...이 없음
 반복문 for,while,foreach,for_in_,
 등호는 오른쪽에 붙음

= 대입 연산자 오른 쪽의 것을 왼쪽에 담아라
== 같다 (보통 완전 일치인데 완전히 같진 않을 수 있다)
!= 같지 않다 not
=== 타입까지 같은 경우

1항 연산자 not
2항 연산자 in
3항 연산자 * ? * : * if문 축약

a==b ? True () : False ()

None type
is도 연산자임
not 2항 연산자 not true == false 1항 연산자
3항 연산자

리스트, 튜플 셋, 딕셔너리
배열(array) 길이가 만들 때 고정
[1,2,3,4,5] 안에 있는 것을 아이템 혹은 원소라고 부름.
# items는 리스트임
items = ['book', 'note']
item = list()

인덱스 숫자로 가져온다 0,1,2,3
리스트 특징 원소 중복 가능 길이가 가변
추가 삭제가 가능함
아이템은 키와 밸류를 같이 부른다.

딕셔너리 = {"키": "밸류"}

in은 연산자임
다중 for문 시 변수 i,j,z
파이써닉 가독성도 좋고 속도도 다른 구현보다 빠르게

c 스타일의 for문 - 사람의 개입이 많아서 오류가 날 확률이 높음
++, -- 증감 연산자 두 개 붙어있음.
+=, -=, *= 복합대입 연산자
for(int i=0; i<길이; i++){
    print()
}

foreach 복수 as 단수 {
    단수~~~~~~
}

for 단수 in 복수

파이썬 스타일 for문
과일들 = ["사과", "배"]
    단수      복수
for 과일 in 과일들:
    print(f"과일 이름은 {item} 입니다.")
    print(f"{}과일 이름은 {item} 입니다.")

for i in range(0, len(과일들)): #얘는 무조건 컴퓨터에서 쓰는 0부터 시작
    print(f"과일 이름은 {과일들{i}} 입니다.")
    print(f"{i}과일 이름은 {item} 입니다.")

                (idx, 튜플)
for idx, 과일 in enumerate(과일들)):
    print(f"과일 이름은 {과일} 입니다.")
    print(f"{idx + 1}번째 과일 이름은 {item} 입니다.")
enumerate는 생성 index를 가짐

range도 함수가 아니라 클래스임.
(시작값), 종료값 (스탭)
0부터 3까지 4회 반복
for i in range(0,3): #0은 생략 최대한 하지말기
    print(f'{i}번째 처리')

타입을 가리지 않는것을 generic이라고 부름.
for문에 else절도 쓸 수 있지만 그냥 if문에만 쓰기

스코프는 말 그대로 범위라는 의미를 가짐
# m이 정의되어 있지 않음을 확인함
m
범위
전역 스콥 global
지역 스콥 local

items=["","",""]
for i in items:
    for j in itemss:
범위 안에 있는 걸 쓰고 싶을 때 global을 써주면 됨.
지역변수를 전역변수를 쓰는 것은 지양해야 함.

main.py
# 진입점
# 파일 이름을 main 또는 runner.py로 해도 됨.

import os


from sec02.sec02_01 import Sec02_01
from sec03.sec03_01 import Sec03_01
from exam.exam import 성적처리

    #전기가 통하면 1 : on - true
    #전기가 안통하면 0 : off - false
    #if 1==1:
    #if True:
    #              0     1
    과일바구니 = ['사과', '배']

    #컨테이너 객체[][][]
    #카운트불 객체 #이터러블 객체
    #R이라는 언어는 1부터 시작함.
    #len() : 카운트불객체 이터러블객체를 넣으면 사람이 카운트하는 숫자를 리턴
    #컴퓨터는 0부터 숫자를

    #자동으로 뒤에오는 숫자에다가 자동으로 1을 빼줌
    #                      2
    for i in range(1, len(과일바구니)):



if __name__ == "__main__":  # 무조건 쓰고 시작하는 것임.
    #Sec02_01.Sec02_01_01()
    Sec03_01.Sec03_01_01()
    Sec03_01.asdf() #변수는 메모리 공간을 차지함. ()가 있으면 메소드임.
    #Sec03_01.asdf  # 변수는 메모리 공간을 차지함. ()를 떼버리면 그 함수를 호출하라는 의미임.
    print(Sec03_01.asdf) # 함수 메소드인경우 () 떼어내고 출력하면 할당된 메모리 주소의 시작위치를 알 수 있음
    print(id(Sec03_01.asdf)) #괄호 안에 객체가 할당받은 아이디를 알 수 있음. 유니크한 고유 위치를 알 수 있음.
    #a : int = 4 # 되긴 하나 이상한 형태임
    #print(a)
    print("성적을 입력하시오")
    score = int(input())
    결과 = 성적처리(score)
    print("당신의 성적 등급은:" + 결과)

while문은 시작과 끝을 알고 있을 때 변수들이 for문 안에 있음
while문은 무한 반복 while 조건에 따라 종료시킬 때
시작 값이 밖에 있음
무한반복은 jump문을 통해서만 벗어날 수 있음.

0부터 100까지 for문하고 while문으로 출력하기
짝수만 출력 for문하고 while문으로 출력하기

금융권이면 알기 - z필

break는 현 반복을 빠져나간다
continue는 continue를 만나는 즉시 다음차례로 간다
           continue하단을 passing
return문 만나는 즉시 종료
호출 안에 리스트 자료형을 넣었다

def has_book(items):
    # pop()은 리스트 내용을 변경하므로 사본을 만듬
    파괴적
    비파괴적

    깊은 복사(deep copy)
    얉은 복사(shallow copy)
    스와로카피
    딥카피
    메모리주소만 참조
    원본에 값을 직접가지고 있는지

    items = [1,2]
    item.pop()
    item
    copied = [1,2]
    위의 두개의 메모리와 아이디는 완전히 다름

    copied = items.copy()
    # 리스트가 빌 때까지 루프를 반복함
    while copied:
        # 마지막 엘리먼트를 꺼냄
        item = copied.pop()
        if 'book' in item:
            print('Found')
            break  # 루프를 빠져 나움
    else:
        print('Not found')

    복합 대입 연산자(=바다코끼리 연산자) :=

def lottery(goods):
    # items에 대입을 수행함
    시그니쳐
    익스프레션
    스테이트먼트

장점 :
랜덤값 = random.choice(goods)

    if item := random.choice(goods):
        return item
    else:
        return 'MISS!!'

예외 처리란 에러가 나면 어떻게 처리하는 지
예외 처리
파이썬이 미리 다 준비해두었다.

python docu

    if
    else if
    else

    try:
        import assdfisfidss
    except Exception as e: #에러가 생길 시 이렇게 하기
        print(e)

    #finally:
        #예외랑 상광 벗이 할 일
        print(a)

items = [1, 2, 3]

i=10
try:
    items[10]
except Exception as e:
    print(e)
    for i in ran
    i -= 1
    items[i]

사후처리 컨셉을 가지고 있음 즉 시도해보고 안되면 예외처리함.
rust가 가진 예외처리 컨셉은 사전에 해결하겠다는 것임.

from io.py안에 있는 import UnsupportedOperation라는 클래스가 있다
io는 입출력이라 함.

# 만들어진 some.txt는 다음 항목 진행 전 삭제함
from io import UnsupportedOperation

# 파일을 쓰기 모드로 염
os.get
f = open('some.txt', 'w') #권한을 부여해줌
try:
    # 쓰기 모드이므로 읽을 수 없음
    f.read()
except UnsupportedOperation as e: #바이너리에 관련된 에러처리인 거 같음
    print(f'예외가 발생했습니다: {e}')
finally:
    print('파일을 닫습니다')
    f.close()

raise문은 의도적으로 예외를 발생시킴
개발자가 적극적으로 예외를 관리할 때 사용하는 문임.
raise는 return 0이라고 생각하면 됨

사용자 예외를 정의해서 더 적극적으로 사용할 수 있다고 함.

# f에 파일 객체가 대입됨
묻지마 이패턴
with로 open이용하여 파일을 열고 f를 사용함.
with open('some.txt', 'w') as f:
    print(f.read)
    print(f.readline)
    print(f.readlines)
    f.write('some text')
    f.writelines("ddfdf")
with문 사용시 자동으로 off를 해줌
