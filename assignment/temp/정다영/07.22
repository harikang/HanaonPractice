프로퍼티
@가 있으면 파이썬에서는 데코레이터임 자바에서는 어노테이션임.
이는 인터프리터나 컴파일러에게 명시적으로 알려준다.
꾸며주는 함수

함수데코레이터
클래스데코레이터 @property

파이썬에서 미리 만들어둔 데코레이터 @property
내가 만들어쓰는 사용자 데코레이터

클래스데코레이터는 클래스를 꾸며준다는 의미 사실 클래스의 메소드를 꾸며주는 것임.

@데코레이터
def asdf(a):
    return a
=> 함수 데코레이터

@데코레이터 ==> 이런 식으로 위에 들어가는 게 아님.
class 클래스명:
    def __

class 클래스명:
@데코레이터 ==> 이런 식으로 들어가는 것임.
    def __

getter와 setter란
클래스 안에는 값과 기능이 들어감.
자바에는 접근 제한자라는 게 있음. : ~~~~~~ 파이썬에는 개발자가 알아서 하라는
식으로 나옴. 마음대로 접근이 되고 수정이 가능하기에 문제가 많이 생김.
self.color = color이러한 값들이 마음대로 접근이 가능함.
로봇1.color = "빨강" 이런 식으로 마음대로 접근이 가능하지 않도록
접근 제한자로 막거나 getter나 setter를 이용한 메소드를 사용하여 접근
할 수 있도록 해줌.
getter란 필드의 값을 가져오는 것임.
setter란 필드의 값을 주입하는 것임.
이 둘은 직접 접근이 아니라 메소드들임.
메소드를 통해서 접근할 경우 오류를 방지해줄 수 있게 해줌.
getter와 setter를 계속해서 만들어주는 건 힘들기 때문에 lombok이라는 걸
이용해서 쉽게 처리해줌. 이는 프레임워크임.
getter은 외부 파일 외부 namespace등을 관리할 수 있음.
@property는 필드라고도 부름. 얘는 getter임.
@필드.setter 얘는 setter임.
파이썬에서는 getter,setter를 쉽게 사용하기 위해 미리 만들어 둠.
개념적으로는 getter,setter이고 클래스 데코레이터임.
롬복
검증
값 : 필드 마음대로 바꾸면 안되
기능 : 함수(메소드)
@필드.setter
@staticmethod
@classmethod
 ...
데코레이터 사용 시 함수의 변형을 줄 수 있음.
플라스크에서는 데코레이터를 적극적으로 사용함.
pastApi도 데코레이터를 적극적으로 사용함.
접근 제한자 : 클래스는 기본적으로 객체지향 프로그래밍을 지원함.
캡슐화, 다형성, 상속 이 3개가 다 구현이 되어있어야 함.
접근 제한자는 캡슐화에 더 가까움. 분리하여 통제하겠다는 의미임.
접근 제한자의 종류는 4가지가 있음.
이미지 주소 : https://images.velog.io/images/wkdtjrrms0/post/5b9dd426-db8b-44c5-a7f2-8c47b5cba298/%ED%99%94%EB%A9%B4%20%EC%BA%A1%EC%B2%98%202021-02-08%20201018.jpg
public > protected > default(자기자신) > private 순으로 제한적임.
위의 순은 자바에서의 기준임.
파이썬에서는 자바처럼 기준이 없음.
파이썬과 자바와는 좀 차이가 있기 때문에 잘 구분해서 보아야함.
데코레이터를 직접 만들 수 있음.
함수를 꾸며주는 함수기 때문에 def로 시작함.
함수를 인자로 받아들임.
포장된 함수를 return해줌.
감싸짐을 당하는 건 감싸는 함수는 데코레이터임.
wrapper : 감싸는 함수 이를 마지막에 반환함.
def trace(f):
    def wrapper():
        print("함수가 호출되었습니다.")
        f()
        print("함수를 실행했습니다.")

    return wrapper

데코레이터는 다른 함수 또는 다른 메소드를 꾸밈.
내장된 함수를 꾸며야함.
@trace
print("본체가 출력됨.")

함수를 재조정하고 구현하기 더 편리하고 쉬움.
이는 데코레이터 구조라고 말함.

def trace(f):
    def wrapper():
        print("함수가 호출되었습니다.")
        f()
        print("함수를 실행했습니다.")

    return wrapper
@trace
def hello():
    print("본체가 출력됨.")

    #print("안녕")
if __name__=="__main__":

    hello()




프로퍼티 - 인스턴스 변수(값)들을 메소드를 통해서 접근하고 다룸.
게터 세터 이야기임.
class Book:
    def __init__(self, raw_price):
        if raw_price < 0:
            raise ValueError('price must be positive') #파이썬에서 지원하는 에러
        self.raw_price = raw_price #항상 같은 이름으로 적어줌.
        self._discounts = 0 #언더 스코어가 붙음.
    @property #getter(겟터) 셀프의 discounts를 접근하겠다는 의미임.
    def discounts(self):
        return self._discounts
    @discounts.setter
    def discounts(self, value):
        if value < 0 or 100 < value:
            raise ValueError(
                'discounts must be between 0 and 100')
        self._discounts = value
    @property
    def price(self):
        multi = 100 - self._discounts
        return int(self.raw_price * multi / 100) #금액을 return
필드 내부에선 self키워드가 붙음.
클래스를 만든 이유는 다른 사람들과 협업하고 한 번만 만들어놓고 두고두고
쓰기 위해서 관리의 용이성을 위해서 만드는 것임.
안에 메소드를 변경하기 싫으면 프로퍼티를 만들어서 붙여주면 됨.
메소드 명이 동일함. 함수 이름이 같으면 같은 범위에서 존재할 수가 없음.
위의 예시의 경우 이름 값은 같지만 return되는 형태가 다르거나 입력되는
input의 형태가 다른 경우 다른 형식으로 확인할 수 있음. 그렇기에 구분이
가능함. 이는 메소드 오버라이드라고 함.
메소드 오버로드 오버로딩 : 같은 이름의 메소드가 쓰이는 것
입력이나 출력이 다르면 구별할 수 있기 때문에
self._discounts = value 얘의 경우 값이 없으면 none이 출력됨.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
메소드 오버라이드 오버라이딩 : 부모가 정의한 메소드를 상속받은 자식에서
재정의하는 것을 의미함.
setter에는 값을 =을 이용해서 값을 할당해주어야 함.
클래스와 인스턴스의 프라이빗 속성
언더스코어는 private속성을 나타내는 의미를 가짐.
book._discounts  # _로 시작하는 변수도 참조할 수 있음
언더스코어 2개로 시작하는 속성(던더)

던더
속성(어트리뷰트) : 값 밸류, 프라퍼티, 필드, 기능, (연관)함수, 메소드(던더메소드, 사용자메소드)
선언
컨스트럭터 생성자
할당
선언(declation)과 정의(difinition)는 다른 걔념임.
class Klass:
    def __new__(): #얘는 self를 안붙임.
        pass
    def __init__(self, x): #init이 가장 대표적임.
        self.__x = x #내부 프로퍼티에 대입 더블 언더스코어
언더스코어의 1개와 2개의 차이가 있음.
프라이빗 속성에 대한 파이썬 커뮤니티의 사상
클래스 - 인스턴스의 모형이 되는 객체
클래스 변수 - 클래스 객체가 유지하는 변수

클래스 변수와 클래스 메소드를 합쳐서 클래스 멤버라고 부름.
이의 특징은 self키워드가 안붙음.
인스턴스를 지칭하지 않고 클래스 자체를 지정
클래스 변수 + 값
클래스 메소드
클래스 안에서 값을 공유할 필요가 있을 떄

# 클래스 변수를 가진 클래스 정의
class Page:
    book_title = 'Python Practice Book' #self키워드가 안붙음
Page.book_title  # 인스턴스가 없어도 참조할 수 있음
Page.book_title = 'No title'  # 클래스 변수 업데이트
Page.book_title

클래스 변수는 인스턴스에서도 참조 가능
클래스에 모두 존재 가능하기에 .찍고 그 안의 값을 참조

인스턴스 변수에 추가해주는 것과 마찬가지임.
# 클래스 변수는 모든 인스턴스에서 공유됨
first_page.book_title
클래스 메소드로 조작함.
class Page:
    book_title = 'Python Practice Book'
    def __init__(self, num, content):
        self.num = num
        self.content = content
    def output(self):
        return f'{self.content}'
    # 클래스 메서드의 첫 번째 인수는 클래스 객체
    @classmethod #클래스 데코레이트가 붙음. 인터프리터에게 알려줌.
    def print_pages(cls, *pages):
        # 클래스 객체 이용
        print(cls.book_title)
        pages = list(pages)
        # 페이지 순으로 정렬해서 출력
        for page in sorted(pages, key=attrgetter('num')):
            print(page.output())
class Page:
    book_title = 'Python Practice Book'
    # 클래스 변수
    def __init__(self, num, content): #생성자
        self.num = num #인스턴스 변수
        self.content = content #인스턴스 변수
    def output(self): #self키워드가 있기에 인스턴스 메소드임을 알 수 있음.
        return f'{self.content}'
    # 클래스 메서드의 첫 번째 인수는 클래스 객체
    @classmethod
    #cls 설계도 자기자신을 나타냄
    #가변위치인자
    def print_pages(cls, *pages): # *가 붙어서 가변인자가 올 수 있음을 생각할 수 있음.
        #*가 있다는 건 함수 뒤에 여러개가 올 수 있다는 의미임.
        # 클래스 객체 이용
        print(cls.book_title) #cls의 book타이틀을 출력해라.
        pages = list(pages)
        # 페이지 순으로 정렬해서 출력
        for page in sorted(pages, key=attrgetter('num')):
            print(page.output())
값을 공유할 것을 클래스 메소드 이용시 그 값을 기억하고 있음.
#클래스메소드 설정
class Book:
    count = 0 #클래스변수

    @classmethod #이걸 안붙이면 에러가 남.
    def 만들어진책(cls): #클래스메소드
        cls.count += 1
        return cls.count

    def __init__(self):
        pass

from sec06.sec06 import Robot
from helpers.debug import *
from sec06.book import Book

if __name__=="__main__":
    책01 = Book()
    책02 = Book()
    책03 = Book()
    Book.만들어진책()
    Book.만들어진책()
    Book.만들어진책()
    Book.만들어진책()
    a = Book.만들어진책()
    pp(a)

static메소드 - 함수처럼 동작하는 메소드
#함수를 만들거나 클래스를 만듦
#안에 다 집어넣고 싶을 떄 static메소드를 사용해주면 됨.
#앞에 스태틱이 붙어있는 함수라고 생각하면 됨.
#유틸리티성 메소드 : 활용하고 람다함수랑 비슷한 느낌임.
#이 메소드의 특징은 인스턴스화 할 필요가 없다는 것임.
#단, 스태틱 메서드라는 것을 알려주기위해 데코레이션을 써주어야 함.

class Page:
    def __init__(self, num, content):
        self.num = num
        self.content = content
    @staticmethod  # 스태틱 메서드로 정의
    def check_blank(page):
        return bool(page.content)

#스태틱메소드 설정


class 사칙연산:
    @staticmethod
    def 덧셈(a, b):
        return a+b

    @staticmethod
    def 뺄셈(a, b):
        return a-b

    @staticmethod
    def 곱셈(a, b):
        return a*b

    @staticmethod
    def 나눗셈(a, b):
        return a/b

from sec06.book import 사칙연산

if __name__=="__main__":
    사칙연산.덧셈(10, 10)
    사칙연산.뺄셈(10, 10)
    사칙연산.곱셈(10, 10)
    사칙연산.나눗셈(10, 10)

page = Page(1, '') #인스턴스화해서 쓴 것
Page.check_blank(page)

def check_blank(page):  # 함수로 문제 없음
    return bool(page.content)

check_blank(page)

클래스 상속 - 메서드 오버라이드와 super()를 사용한 베이스 클래스로의 접근
자바는 다중상속을 지원하지만 파이썬의 다중상속은 내용이 다름.
파이썬은 여러개의 부모를 받아오는 게 가능함. 부모 사이에 ,를 넣고 나열이 가능함.
클래스는 근데 하나의 클래스만 받아옴.
다중 상속과 비슷한 아이로 interface라고 있음.

#값과 기능은 상속한다.

class 학생클래스 extends 부모클래스, 선생님클래스, ..., {

}
class Page(adf, aefa, aefs): #오브젝트 생성해도 괜찮음. #부모의 역할을 함.
    def __init__(self, num, content):
        self.num = num
        self.content = content
    def output(self):
        return f'{self.content}'

# 메서드 오버라이드, 오버라이딩
class TitlePage(Page): #얘가 위의 클래스를 상속함.
    def output(self):
        # 베이스 클래스의 메서드는 자동으로 호출되지 않으므로
        # 명시적으로 호출함
        title = super().output() #타이틀은 super의 output
        #super는 바로 위의 부모를 의미함.
        return title.upper() #self의 컨텐츠를 담아준 것
        #title의 upper에 담은 것

모든 객체는 object클래스의 서브 클래스임.

class Length(float):  # 내장 타입의 서브 클래스 작성
    def to_cm(self):
        return super().__str__() + 'cm'

print(12.0.__str__()) #문자열과 관련됨.
pencil_length = Length(16)
print(pencil_length.to_cm())

다중 상속 - 여러 베이스 클래스를 지정
클래스를 만들었고

__mro__이용한 메서드 결정 순서 확인
mro란 Maintenance(유지), Repair(보수) and Operation(운영)의 약자임.

추상 클래스와 인터페이스
추상 클래스 : 추상화 수준이 위로 올라갈 수록 깊어짐.
계층적임. 구체적인 구현은 안되어있고 이름만 정의해둠.
속성에는 값과 기능이 있음.

정의만 되어있는게 한개라도 있으면 추상클래스라고 함.

모든게 다 정의만 되어있고 구체적인 구현은 서브클래스에서 해야할 경우 인터페이스라고 함.
근데 인터페이스는 클래스는 아님.
클래스 안에는 attribute들이 들어있어서 얘를 상속받아서 쓰는 서브클래스에서 해주어야 함.
혼자 작업하지 않고 나눠서 작업할 떄 용이함.
pass를 이용한 건 추상클래스나 상속을 받아서 밑에서 구현한다는 의미임.

모듈 - 코드를 기술한 .py 파일

(주: encoder.py)
import base64


def str_to_base64(x):
    """문자열을 base64 표현으로 변환함

    b64encode()는 bytes-like object을 인수로 받으므로
    문자열은 encode()로 bytes 타입으로 변환해 전달함
    """
    return base64.b64encode(x.encode('utf-8'))

['__builtins__',
 '__cached__',
 '__doc__',
 '__file__',
 '__loader__',
 '__name__',
 '__package__',
 '__spec__',
 'base64',
 'main',
 'str_to_base64',
 'sys']

위의 내용은 모듈 객체 자체의 내부의 것들임.

# b'cHl0aG9u'
# $ python3 encoder.py book
# b'Ym9vaw=='4.b64encode(x.encode('utf-8')) -v --path c:\
print(str_to_base64('python'))

import base64
import sys

if __name__=="__main__":
    #인수얻기 실인수 아규먼트 얻기
    전체인수 = sys.argv
    pp(전체인수)
터미널에서 값을 넣고 실행시 출력될 때 포함이 되어서 나옴.

직접 실행할 때만 동작하는 코드

print(__name__) #이것만 출력시 __main__으로 결과가 나옴.
print(globals())
print("~~~~~~~~~~~~")
print(locals())
#아무것도 안한 경우 globals()와 locals()에 똑같은 값이 들어감.
__doc__="""
메인파일입니다.
"""
#위의 값을 넣어주면 __doc__부분이 메인파일입니다라고 변함.
file안에는 파일경로가 들어있음.
cached에는 실행시킬 때마다 로드하지 않고 내용을 담아놓는 걸 말함.
sys는 모듈이라는 걸 알려줌.

패키지 - 모듈의 집합
패키지 작성
# 빈 __init__.py 작성
# Windows에서는 type nul > b64/__init__.py
$ touch b64/__init__.py # 리눅스에서 파일을 만들 수 있는 코드

패키지 안의 모듈 임포트
#from b64 import encoder, decoder
#import b64.encoder, b64.decoder
from b64.encoder import str_to_base64
encoder.str_to_base64()

__init__.py - 패키지 초기화 수행

모듈은 .py파일인데 패키지와는 좀 다름
모듈은 각각의 파일들을 다 포함하여 부르는 말임.
만들어갈 땐 쭉 만들고 다른 사람들도 쓸 수 있도록 배포시 정리하여 써주면 됨.
구체적으로 하나씩 나열해도 되고 그냥 해도 됨.

와일드카드를 이용해 여러 속성의 일괄 임포트

open  # 내장 함수 open 파일열 때 사용

from gzip import open  # gzip의 open을 임포트 gzip은 묶어논 것
open  # open()은 gzip.open()으로 지정되어 있음

이름 공간과 변수의 스코프
이름 공간 - 이름과 객체의 매핑

pythonpath - sys.path에 검색 경로를 추가
# 옵션으로 현재 디렉터리와 PYTHONPATH를 지정해서 실행
!docker run -it --rm -v $(pwd):/usr/src/app -w /usr/src/app -e PYTHONPATH=/usr/bin:/bin python:3.8.1 python3 syspath.py

$ docker run -it --rm -v $(pwd):/usr/src/app -w /usr/src/app python:3.8.1 python3

from pathlib import Path #객체를 경로로써 다룸.

sys.path
# 빌트인 sys 모듈이 임포트 됨
>>> import sys

# 사용자 정의 base64 모듈이 임포트 됨
>>> import base64
imported my base64.py

이름 공간 활용 시 이름 충돌 안되게 다른 이름을 사용하여야 함.
스코프 - 직접 엑세스 가능한 영역
로컬 스코프 - 함수 안에 국한된 스코프
# 같은 open이라도 gzip.open과 os.open은 다른 객체임
import gzip
gzip.open

def f(x):
    # 현재 로컬 스코프 내용을 표시
    print(locals())
    value = 'book'
    # 변수 value 정의 후 로컬 스코프 내용 표시
    print(locals())

f('python') #함수 호출 시 카피가 되어서 값이 들어가는 것임.
함수가 정의되어 있고 함수가 호출될 때 내부 변수로 함수가 카피되서 들어가게 됨.



