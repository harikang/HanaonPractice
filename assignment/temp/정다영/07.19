부울 연산
x or y x가 참이면 x 그렇지 않으면 y를 반환함
진리표상 true true면 true임
# 어느 한쪽이라도 참이면 참
(True or True) == True or True
배열 안에 있으면 참임.
x = ['book']
y = []
x or y  # x가 참이므로 x를 반환함
not은 거꿀로 하는 것임.
숫자값 - 기본 타입
int와 float #1 - 2.0  # 정수와 소수의 뺄셈
두 숫자 사이에 연산할 경우 더 큰 값으로 연산함.
typecasting해준다고 함. 암묵적으로 처리됨.
float과 복소수로 나올 경우 복소수 타입으로 변환되어서 계산 값이 나옴.
1 / 0  # 0으로 나누면 에러가 발생함
ZeroDivisionError                         Traceback (most recent call last)
<ipython-input-40-1aa302398fd0> in <module>
----> 1 1 / 0  # 0으로 나누면 에러가 발생함
ZeroDivisionError: division by zero
0으로 나눈 에러 처리를 하는 exception임.
11 % 5  # 나머지 (나눗셈)
11 // 5  # 소수점을 버림
11 ** 5  # 5제곱 *는 아스타리스트 한 개는 곱셈을 뜻하는 연산자임
두 개는 묶여있어서 제곱 연산자를 의미함.
import math(수학 관련 것들이 모여있는 py파일임.)
pow(11, 5) #11의 5승임. pow는 power라는 말의 준말임.
11을 5제곱한 결과 = math.pow(11, 5)
math.log(5)  # 자연 로그값을 구함
즉, math아래에 수학관련 함수들이 들어있음.
숫자값을 다루는 내장 타입
int() - 정수
float() - 부동소수
complex() - 복소수
a = 1  # 숫자값 리터럴을 사용할 때 int클래스로 정의된 변수
타입을 찍어보면 int로 나옴
1_000_000  # _을 사용하면 알아보기 쉬움, 가독성을 위해서 사용
그러나 계산에서는 영향을 끼치지 않음
float(a)  # int 타입 값에서 float 타입 값으로 변함.
1.0으로 결과가 나오면 .이 있으므로 float타입이라고 볼 수 있음.
numpy는 배열로 mdarray를 타입으로 가짐. 그냥 파이썬이 자체적으로
가지고 있는 array도 있음. 그러나 이는 잘 안씀. 내장 array임.
[1.0 1.0 2.7] 이런식으로 ,가 없이 되어있음.
complex는 잘 쓰진 않음.
# int 타입으로의 캐스팅(타입 변환)은 0에 가깝도록 버림
int(3 / -2)
int타입은 자릿수 제한이 없음.
type(1e-5)  # 지수 표기도 지원(e는 E로 써도 됨), 큰 수를 다룰 때
e를 사용함.
-> 1*10**5
-> 1*10**-5
e는 엄청 큰 수나 엄청 작은 수를 표현할 수 있는 표기법임.
3.0 + 4  # float 타입과 int 타입 사이의 연산은 float 타입
변환하는 기준은 메모리 크기를 기준으로 변환하는 것임.
infinity = float('inf')  # 무한대, 무한대는 float타입임.
float('-inf')  # 음의 무한대
import sys
sys.float_info # sys는 컴퓨터 사양을 확인할 수 있어서 그 시스템
에 맞추어서 값을 바꾸어줌. 즉, 최대값이 어디까지 가능한 지 확인이
가능함. 그렇기에 이는 범용프로그램을 할 때 꼭 쓰임.
다른 것을 다룰 때 자주 이용됨.
float타입을 다룰 때 주의점 - 직관적이지 않은 동작은 하지 않기
# 첫 번째 인수와 두 번째 인수가 가까우면 True를 반환함
import math
math.isclose(0.1 + 0.1 + 0.1, 0.3)
a + 2j  # complex타입 사이의 연산은 complex 타입
real은 실수부 img는 허수부를 의미함.
문자열은 아주 중요함!
# 문자열 작성
# "book"도 같음
book = 'book'
type(book)
쌍따옴표나 따옴표 둘다 가능하나 포매팅시 쌍따옴표로 변화됨.
# 줄바꿈(\n)을 포함한 문자열 작성
notebook = 'note\nbook'
print(notebook)  # print()를 사용하면 줄을 바꿔서 출력함
줄넘김 표시는 \n임.
+연산자는 문자열을 붙여주는 연산자임.
*를 문자열에 쓸 떄는 문자열이 4번 반복되는 것임.
문자열 안에서의 변수 이용
f-string - 식을 삽입할 수 있는 문자열 리터럴
f'python practice {title}'  # 변수값으로 치환
f'python practice {"note" + title}'  # 식을 이용
format()메소드는 list를 하나씩 인자로 뽑아줄 수가 있음.
# 인수의 위치를 지정해서 치환
과일들 = ["사과", "배", "adfa", "dsdf"]
'python {} {}'.format(*과일들)
dictionary에서도 사용됨.
# 사용하지 않는 키가 있어도 관계없음
books = '{x} {z}'
books.format(**d)
키를 자릿값으로 하여 바꾸어주어도 됨.
%연산자의 문자열 포맷은 옛날부터 계속 사용되어옴.
이는 머릿속에 담지 않아도 됨.
str타입과 비슷한 bytes타입임.
with open(r"경로", mode= ,)
문자열하고 byte하고 잘 구분하기 즉, 상호변환이 가능함.
# UTF-8을 지정해서 인코딩
encoded = book.encode('utf-8')
type(encoded)  # bytes로 되어 있는 것을 확인
보통 호환이 됨. 소문자 utf-8을 기본적으로 다루지만 범용적으로 다루지 않는
것들이 있음. 즉, 꺠지면 엔코딩 처리를 해줌.
인코딩 직렬화 시리얼라이즈 json dump
디코딩 역직렬화 객체화 json.load
load라는 건 내릴다고 생각하는 게 더 나음.
잘못된 인코딩 형태를 지정해주면 에러를 발생함.
list는 array와 다르기 때문에 배열이라고 부르는 건 고려하기
list타입의 중요한 점은 변경할 수 있다는 게 중요 포인트임
array타입은 고정된 타입이고
관계가 있는 것끼리 묶기 위해서 사용한다.
문자열을 리스트화 해버리면
# 문자열은 이터러블한 객체
list('book') [] 추가가 가능함. 이는 append라는 키워드를 사용
for문하고 append 결합은 당연함.
맨 뒤에다가 요소를 추가해주는 것임.
list타입에다가 append를 이용하여 추가를 하는 것임.
items.pop(0)  # 맨 앞의 엘리먼트를 꺼내고 리스트에서 삭제
그러나 삭제할 게 없으면 범위에서 벗어났다는 에러가 발생함.
del는 연산자임.
연산자를 통해서도 제거가 가능함.
인덱스를 사용한 엘리먼트로의 접근은 0번부터 할당됨.
items[1]  # 인덱스는 0번에서 시작해 오른쪽으로 셈
음수로도 접근이 가능함.
items = ['note', 'notebook', 'sketchbook']
           0           1          2
           -3          -2         -1
이 숫자들은 문자열 인덱싱이라고 말함. 숫자를 지정해주는 것임.
슬라이싱
0:1이고 개수로는 2개임.
items[0:2]  # 앞에서부터 items[2]의 하나 전까지 포함됨.
items  # 원래 리스트는 그대로 유지됨 원래대로 유지되는 것은 비파괴적
연산 처리 함수 메소드
생략도 가능함. 앞을 생략하면 맨 앞부터 포함되고 뒤를 생략하면 마지막까지 포함됨.
items = ['note', 'notebook', 'sketchbook']
items[0:-1]
0~~2
# 엘리먼트 수는 일치하지 않아도 관계없음
items = ['note', 'notebook', 'sketchbook']
items[0:2] = [1, 2, 3]
치환이 되어서 들어간다고 보면 됨.
pyinstaller => 다루기 어려움.
변경할 수 없는 배열을 다루는 타입
# 튜플 작성
items = ('note', 'notebook', 'sketchbook')
type(items)
얘는 함수의 return타입에 사용됨.
튜플 생성 시 주의점
tuple()  # 빈 튜플
()  # 이것도 빈 튜플임
(,)  # 이것은 다름
  File "<ipython-input-144-3df8e898234a>", line 1
    (,)  # 이것은 다름
     ^
SyntaxError: invalid syntax
튜플 자료형인 index로 접근
# 반환값이 튜플임
def four_operation(a, b):
    # 오타로 콤마(,)가 붙음
    return a + b, a-b, a*b, a/b

    결과 = four_operation(12,3)

    덧셈, 뺼셈, 곱셈, 나눗셈 = 결과[0] #덧셈이 나오게 됨.
튜플리턴은 적극적으로 쓸만 함.
for문에서의 배열의 동작
list와 튜플에서
for in 방식
     단수(내맘대로)
for item in ['note', 'notebook', 'sketchbook']:
    print(item)
조건식에서 사용할 수 있는 배열의 특성
bool([])  # 빈 리스트는 거짓
bool(['book'])  # 엘리먼트가 존재하면 참
튜플과 리스트의 구분
딕셔너리 - 키와 값의 셋을 다룸
dict타입 - 딕셔너리를 다루는 타입

# 키워드 인수를 사용한 딕셔너리 작성
dict(note=1, notebook=2, sketchbook=3)
#이렇게 만들지 말기

딕셔너리는 키로 접근 하여 추가하거나 삭제가 가능해짐.
items.pop('notebook')  # 엘리먼트를 꺼내 딕셔너리에서 삭제
del items['sketchbook']  # 엘리먼트 삭제
# get()을 사용하면 키가 없어도 에러가 발생하지 않음
# 키가 없을 때의 기본값은 None
items.get('book')
키로 사용할 수 있는 객체의 조건
리스트 안에 리스트, 딕셔너리 안에 딕셔너리
for문 딕셔너리 동작
items = {'note': 1, 'notebook': 2, 'sketchbook': 3}
for k in items:  # 키만 얻음
    print(k)
    items = {'note': 1, 'notebook': 2, 'sketchbook': 3}
for value in items.values():  # value만 뽑고 싶은 경우
    print(value)
# 키와 값의 튜플을 얻음
     2             2
for key, value in items.items():
    print(key, value)
집합 - 유일한 엘리먼트를 모아서 다룸
set타입 - 변경할 수 있는 집합을 다루는 타입
과일들 = ["배","배","사과","배","사과"]
# set 타입의 집합을 작성
중복제거된과일들 = list(set(과일들))
items = {'note', 'notebook', 'sketchbook'}
type(items)
set는 변경은 가능하지만 중복은 불가능함.
set는 순서가 없기 떄문에 index로 접근이 불가능 함.
items.remove("배")
frozenset 타입 - 변경할 수 없는 집합을 다루는 타입
집합 연산 - 합집합,차집합,교집합, 대칭차집합
set_a | set_b  # 합집합 #|는 파이프라고 부름.
# 합집합. set.union()으로도 동일하게 구할 수 있음
# 차집합. set.difference()로도 동일하게 구할 수 있음
# 교집합. set.intersection()으로도 동일하게 구할 수 있음
set_a & set_b #&는 엔퍼센트라고 부름.
# 대칭차집합. set.symmetric_difference()로도 동일하게 구할 수 있음
set_a ^ set_b #^은 캐럿이라고 부름
# 부분 집합 판정. set.issubset()으로도 동일하게 구할 수 있음
가장 중요함!
컴프리헨션 - 효율적인 시퀀스 생성
리스트 컴프리헨션 - 효율적인 리스트 생성
축약 문법으로 속도가 비교적 빨라서 파이써닉한 대표적인 예 가독성
사실 따지면 축약되어있는 것 밖에 없음.
리스트컴프리헨션은 ==> 리스트를 만들어줌.
==> for문 리스트 append if문 -> 축약해서 한방에 처리
리스트 = []
for i in range(0, 100):
    if i%2==0
        리스트.append(i)
리스트 = [0 ~~~~~~~~~ 99]

리스트컴프리헨션으로 만들어진 리스트 = [ i, for i in range(0, 100)  (if i%2==0) if i%2==0 > 10]
여기서 괄호는 생략한다는 거지 따로 뭔가 있다는 게 아님.

리스트컴프리헨션 => 얘만 알면됨
튜플컴프리헨션
세컴프리헨션
딕셔너리컴프리헨션

헨션 = [ x, for x in range(0, 100) if x > 10]
[(x, y) for x in [1, 2, 3] for y in [4, 5, 6]] => 이걸 이용해서 구구단 만들기
[
    (x, y, x*y)
    for x in [2, 3, 4,5,6,7,8]
    for y in [1,2,3,4, 5, 6,7,8,9]
    if x%2 == 0
]
어떤 자료구조는 안에 내용이 많음. 자료 내에서 특정 값만 꺼내서 쓰는데
걔를 호출하는 순간 메모리에 왕창 들어감.
generator를 통해서 만들어진다는 의미.
가변 객체 - 정의한 뒤 값을 변경할 수 있는 객체
불변 객체(튜플) - 정의한 뒤 값을 변경할 수 없는 객체
컨테이너 객체 - 다른 객체에 대한 참조를 가진 객체
이터러블 객체 - for문에서 사용할 수 있는 객체
호출 가능 객체 - ()를 붙여 호출할 수 있는 객체
함수 포인터와 비슷하다고 생각함.

함수
def를 이용해 함수를 정의와 실행
함수는 괄호를 무조건 여닫아 줌.
가인수 정의부 파라미터 인자
실인수 호출부 아규먼트 인자

def print_page(content):
    print(content)

print_page("my contents")

기본 값은 인자 없이
함수는 객체 1급 객체를 지원하는 함수를 다른 함수에 집어 넣을 수도 있음
# 변수 print_page는 함수 객체임
type(print_page()) #뒤에 호출된 타입을 출력

f = print_page  # 변수 f에 함수 print_page를 대입함
f()  # print_page()와 같음, 함수 자체를 대입한 것임.
#printer
def print_title(printer, title):
    print('@@@@@')
    # 인수 printer는 함수 객체임
    printer(title.upper())
    print('@@@@@')
#함수 print_page를 반환해 타이틀을 출력함.
함수의 반환값
def increment(page_num):
    print()
    비워두거나
    return None
    return
    ->None
    return page_num + 1
함수 자체도 반환이 가능함.
함수의 반환값이 담김
재귀함수 자기자신을 다시 호출함.
def increment(page_num, last):
    next_page = page_num + 1
    if next_page <= last:
        return next_page
    raise ValueError('Invalid arguments')
raise는 개발자가 명시적으로 적극적으로 에러를 발생시키는 것을 의미함.
그래서 더 뒤 에러가 발생하지 않도록 하는 것을 의미함.
조건에 걸릴 시 호출되는 데로 돌아감.
return이 없을 떄 반환 값은 none이 반환됨.
조건문에 따라 실행되지 않을 때 실행되지 않아도 none이 반환됨.
함수의 다양한 인수 위치 인수 - 가인수 이름을 지정하지 않고 실인수를 전달함.
인수를 지정하지 않고 전달 안함.
increment(2, 10)  # 위치 인수를 사용한 함수 호출
값 복사를 통해서 들어감.
기본적으로 별개로 들어감. deep copy임. 안에서 내용이 바뀌어도 아무런 상관이 없음.
위치인자는 개수가 부족하면 에러남.
키워드 인수 - 가인수 이름을 지정해 실인수를 전달함.
# 키워드 인수를 사용한 함수 호출
increment(page_num=2, last=10)
# 순서를 바꾸어도 결과는 같음
increment(last=10, page_num=2)
# 위치 인수와 키워드 인수를 함께 사용하기도 함.
import pandas as pd

increment(2, last=10)
pd.read_excel(r"", encoding="utf-8")
무조건 위치 인수는 키워드 인수보다 앞에 나와야함.
기본값을 가진 인수는 = 으로 줄 수 있음.
기본값은 뒤로 가야함!!
기본값의 함정
from datetime import datetime
      py파일           클래스 (그러나 클래스는 사실 대문자로 시작해야 함)
datetime은 시간을 다루는 내장 클래스로 인스턴스화로 바꾸어야 할 수 있음.
from datetime import datetime
d = datetime()
print(d)
# 기본값의 잘못된 사용 예시
a = datetime.now()

# print_page(sdfsf, a)
def print_page(content, timestamp=datetime.now()):
    print(content)
    print(timestamp)
길이가 변하는 위치 인수(=가변 위치 인자)
가변 : 값이 변하는 게 아니라 개수가 변함.
# 길이가 변하는 위치 인수를 받음
def print_pages(content, *args):
    print(content)
    for more in args:
        print('more:', more)
def 숫자들합을구함() #몇 개가 들어올 지 모름
    누적합 = 0
    for arg in *args:
        누적합 += item
    return 누적합
숫자들 = rage(0,100) #5050이 안나옴. 100이 안들어가는 걸 확인해 볼 수 있음.
숫자들 = [1,2,3,4,5] 가변적인걸 다쓸 수 있으머

숫자들합을구함()


#숫자들 = (1,2,3,4,5)
결과 = 숫자들합을 구함(*숫자들)
prin(결과)

content라는 변수가 있고 *args 가변이라는 뜻
*args는 리스트 같은 변동있는 값을 다룰 수 있음. 관례적으로 계속 그랬음.
가변키워드인자
** kw args 아규먼트 (호출시 들어감)
정의할 떄 파라미터
함수만 잘 만들어쓰면 됨.
길이가 변하는 위치 인수를 받음.
길이가 변하는 키워드 인수(얘는 딕셔너리 생각하기)
# 길이가 변하는 키워드 인수를 받음
def print_page(content, **kwargs):
    print(content)
    for key, value in kwargs.items():
        print(f'{key}: {value}')
# 어떤 호출에도 대응함
def print_pages(*args, **kwargs):
    for content in args:
        print(content)
    for key, _ in kwargs.items(): #밑에서 안쓰고 싶을 때 _를 넣어주기
        print(f'{key}: {value}')

인수 인자는 파라미터 호출 시 인수라 부르고 가인자
위치만 인수로 가짐 - 호출 시 가인수 이름을 지정할 수 없는 인수
abs() 특정 값을 절대값으로 결과값을 전해주는 것
help() 도움말 페이지의 값을 가짐.
인수 리스트 언팩 - 리스트나 딕셔너리에 저장된 값을 인수로 전달
함수의 독스트링
def increment(page_num, last, *, ignore_error=False):
    """다음 페이지 번호를 반환함

    :param page_num: 원래 페이지 번호
    :type page_num: int
    :param last: 마지막 페이지 번호
    :type last: int
    :param ignore_error: True면 페이지를 벗어나도 예외를 보내지 않음
    :type ignore_error: bool
    :rtype: int
    """
    next_page = page_num + 1
    if next_page <= last:
        return next_page
    if ignore_error:
        return None
    raise ValueError('Invalid arguments')

- FreeGUI예시
import FreeSimpleGUI as sg

과일바구니 = []

layout = [[sg.Text('과일명을 입력해주세요')],
                 [sg.InputText()],
                 [sg.Submit(), sg.Cancel()]]

window = sg.Window('과일가게', layout)

event, values = window.read()
window.close()

text_input = values[0]
sg.popup('담은 과일', text_input)
과일바구니.append(text_input)
sg.popup('과일 바구니: ', 과일바구니)

lambda식 - 함수형 프로그래밍과 관련이 있음
callback과 관련됨 일등 시민 first citygym
이름이 없어서 무명함수 익명함수라고도 부름
보통은 람다 함수라고도 부르지만 람다 식이라고 부름
값으로 치환하면 다른 함수의 인자로 들어갈 수 있음.
보통 함수는 정의부와 호출부가 있는데 이름이 없다는 것은 호출을 안한다.
즉, 부를 일이 없다는 의미 한 번 쓰고 버린다는 의미임.
함수를 대체하는 역할이 있음.
increment = lambda num: num + 1  # lambda 식으로 함수를 정의함
람다 표현으로 만든 함수
<function __main__.<lambda>(num)> lambda에 포함된 메인
함수 클래스에 속함. 람다로 만듬 <> 안에는 타입이 들어감. 람다 타입임.
괄호를 여닫은 사이에는 인자가 들어감.
즉, 람다로 시작하면 람다식임.
def asdf(num):
    return num + 1

        input : output
lambda     num : num + 1
필터함수도 중요함! 순수 함수라고도 함.
이름 그대로 필터링 한다는 의미임. 넣은 것보다 무조건 같거나 작은게 나오는게 필터링임.
mapp이라는 건 넣었던 숫자와 동일하게 나와야함.
거름망은 함수가 들어가주어야 함.
filter는 함수가 아니라 클래스임. filter라는 클래스가 생성되면서 함수라고 정의가 됨.
위에 배운 람다함수를 씀.
# 첫 번째 인수의 함수가 참이 되는 것만 남음
filtered = filter(lambda x: len(x) == 3, nums)
list(filtered)
필터 타입을 가졌는데 이를 리스트 타입으로 바꾸어서 출력해주는 것임.
람다함수로 안만들 때는 홀수 함수로 지정

lambda     x    :     len(x) == 3 #길이가 3인 것만 반환됨.
#람다는 이름이 없음
filtered = filter(lambda x: len(x) == 3, nums)
[one, two] #리스트화하여 print로 찍음.
#람다함수 자리에 일반함수를 넣을 수도 있음.

list(filtered)


def asdf(x):
    if len(x) == 3:
        return True
    else:
        return False


filtered = filter(asdf, nums)

list(filtered)

숫자들 = [1,2,3,4,5]
def a2(x):
    return x*2
mapped = map(a2, 숫자들) #첫번째 인수로 함수를 두번쨰로 iterable을 받아들임.

print(list(mapped))

mapped = map(lambda x: x*2, nums) #람다식 버전임.

print(list(mapped))
필터와 맵은 적극적으로 쓰는 게 좋음.
재귀함수는 필요없는 연산이 생기기에 메모이제이션 기법을 사용함.
reduce는 완전히 제거해버림.
타입 힌트 - 어노테이션을 사용해 함수에 타입 정보 부여
reduce 누적합

함수의 인자로 넣을 것들을 미리 알려주는 것을 타입힌트라고 함.
타입 정보를 부여함으로써 얻을 수 있는 장점

@staticmethod
인터프리터나 정보를 부여해주는 것임
@어노테이션 -> 자바에서
: -> 파이썬에선 콜론으로 타입 힌트를 부여해줌.
문제를 빠르게 파악할 수 있다는 장점이 있음.

정적 타입 언어의 장점은 문제가 발생하면 알려주고 개발하기에 용이함.
그래서 파이썬은 동적 언어이기 떄문에 정적 타입의 언어의 흉내를 냄.
# Optional은 None의 가능성이 있을 때 이용함
from typing import Optional(대문자는 클래스, 소문자는 함수)
뒤에 ,를 붙이고 함수를 쓸 수 있음.
def increment(
    page_num: int,
    last: int,
    *,
    ignore_error: bool = False) -> Optional[int]:
    next_page = page_num + 1
    if next_page <= last:
        return next_page
    if ignore_error: #이게 참이면 기본 값이 none임.
        return None
    raise ValueError('Invalid arguments')
강력한 type매칭

Optional은 none의 가능성이 있을 떄 이용함.

def asdf(a,b,c)->str:
    ""
    ''''''_summary_
    print(asdf,__doc__())
어노테이션 시 이용 가능
파이썬은 쉽고 동적에서 정적으로 바꾸고 속도도 빠름.

def decrement(page_num: int) -> int:
    prev_page: int  # 타입 정보를 붙여 변수를 선언함
    prev_page = page_num - 1
    return prev_page
return 값에 붙어있는데 여기서 변수에 대한 타입 정보 부여

타입 힌트 활용 사례 - 정적 분석 도구 이용
# mypy 명령어를 사용한 정적 타입 체크 실행
!docker run -it --rm -v $(pwd):/usr/src/app -w /usr/src/app python:3.8.1 bash -c 'pip install mypy==0.740; mypy scratch.py'
$(pwd) -> 이건 변수를 뜻함.

파이썬의 클래스 구조
인스턴스 - 클래스를 기반으로 만들어진 객체
인스턴스 메서드 - 인스턴스에 묶인 메서드

객체지향 객체들간의 상호작용을 통해 구현

#클래스멤버
#내용을 알기 전에는 self를 꼭 써줌.
청사진, 설계도, 방틀, 공장
구체화 -> 인스턴스 (객체)
로봇1
로봇2
로봇3
#인스턴스 멤버 속하는 3가지 속성
# 1. 생성자(생략 가능) 2. 값(변수) 3. 기능(함수이자 메소드)

class Page:  # 클래스 정의
    def __init__(self, num, content): #self는 클래스를 통해 구체화된 인스턴스 자체를 가르킴 다른 언어에서는 this라고 함.
                                     #다른 언어에서는 암묵적으로 사용함.
        self.num = num  # ページ番号
        self.content = content  # 페이지 내용
    def output(self):
        return f'{self.content}'

class Robot:
    def __init__(self, color.name):
        self.color = color
        self.name = name
        return None #return을 만들어줘도 되고 안만들어줘도 됨.

    def run(self):
        print("앞으로 달리기")

from sec06.sec06 import Robot
from helpers.debug import *
if __name__=="__main__":
    #인스턴스화
    로봇1 = Robot("검정", "1호")
    로봇2 = Robot("빨강", "2호")
    pp(로봇1.name)
    pp(로봇1.color)
    pp(로봇1.run())

인스턴스 만들기
만들 수도 있고 태어나면서 상속을 받는 것들도 있음.

인스턴스 메서드 - 인스턴스에 묶인 메서드
인스턴스 변수 - 인스턴스가 저장하는 변수
클래스 변수
클래스 메소드
정적 메소드

title_page.section = 0
title_page.section
-> 이런 변수들을 인스턴스 변수라고 말함.

인스턴스 초기화 - __init__() 인스턴스 초기화를 수행하는 특수 메서드
# 클래스 정의
class Page:
    def __init__(self, num, content, section=None):
        self.num = num
        self.content = content
        self.section = section
    def output(self):
        return f'{self.content}'
인수를 전달해 인스턴스화 하기
    #인스턴스 작성
    title_page = Page(0, 'Python Practice Book')
__init__()과 __new__()의 차이 - 이니셜라이저와 컨스트럭터
#클래스 메소드
#인스턴스 메소드

__del__ : 소멸자 이는 인터프리터가 넣어줌.
class Klass:
    def __new__(cls, *args):  # 컨스트럭터
        print(f'{cls=}')
        print('new', args)
        # 작성한 인스터스를 반환함
        return super().__new__(cls)
        #cls 관례적으로 사용함. 클래스 자기자신을 지칭한다는 의미임.
    def __init__(self, *args): # 이니셜라이저
        # 인스턴스 초기화는 여기에서 수행함
        print('init', args)
가비지 컬렉터란 메모리 누수가 일어나지 않도록 함수를 실행한 후
그 값들을 회수해주는 것을 의미함.

바로 위의 부모가 object임. new라는 키워드로 초기화하고 
super키워드는 바로 위의 부모를 지칭한다고 보면 됨.
