@ 데코레이터        @어노테이션 인터프리터나 컴파일러한테 명시적으로 알려줌. 
: 꾸며주는 함수     

함수데코레이터
클래스데코레이터

파이썬 미리 만들어 둔 데코레이터와
내가 만들어 쓰는 사용자데코레이터 

@property : 파이썬에서 미리 만들어 둔 데코레이터 = 클래스데코레이터
클래스 데코레이터 -> 클래스의 매소드를 꾸며줌. 


"""
@property (getter)
@필드.setter (setter)
@static #static method라는 메소드가 있음.
@classmethod 
"""

자바의 경우는 접근제한자가 존재하지만 파이썬의 경우는 마음대로 접근할 수 있고 마음대로 개발을 할 수 있다. 
그렇기 때문에 문제가 발생하기도 함. 

자바의 경우, 접근제한자의 종류는 4종정도 있음. 
public > protected > default() #기본값이기도 하지만 본인자신을 의미.  > private(제일 제한되어있음.)

파이썬은 없음. 
_(underscore) : 접근하지말라는 암묵적인 의미.
필드를 생성할 떄, _를 추가하기도 함. 하지만 접근이 불가능한 것은 아님.

class 내부에는 값과 기능이 존재하는데, 여기서 기능은 함수이자 메소드를 의미함. 값은 필드를 의미함. 
이 두가지를 attribute라고 함. 

-> class에 들어있는 class decorater이고, property라고 class의 method에 씀. 
값을 가져오는 메서드를 getter, 값을 저장하는 메서드를 setter

class Person:
    def __init__(self):
        self.__age = 0
 
    @property
    def age(self):           # getter
        return self.__age
 
    @age.setter
    def age(self, value):    # setter
        self.__age = value

james.age = 20      # 인스턴스.속성 형식으로 접근하여 값 저장
print(james.age)    # 인스턴스.속성 형식으로 값을 가져옴

일반적인 반복작업을 대행해주는 framework이 있음. 

python은 객체지향프로그래밍을 지향함. 
= 접근제한자 ~= capsule화(분리하여 통제하겠다) , 다형성, 상속


ex. trace라는 decorater를 만듦. 
def trace(func): #호출할 함수를 매개변수로 받음. 
    def wrapper():
        print(func.__name__,'함수 시작') # __name__으로 함수 이름 출력
        func()
        print(func.__name__,'함수 끝') 

    return wrapper #wrapper 함수 반환. 

@trace
def hello():
    print("hello")

#method overload overloading = 같은 이름의 메소드가 쓰이는가
입력이나 출력이 다르면 구별할 수 있기 때문에 

#method override overriding = 부모가 정의한 메소드를 
상속받은 자식에서 재정의  

언더스코어로 시작하는 속성(attribute): 값(value, field) -> property , 기능(method(던더메소드, 사용자메소드))
__new__():
__init__이 가장 대표적임. 

__는 참조가 불가능한 변수

class member
class parameter
class method

instance를 지칭하지 않고 class 자체를 지칭.
class안에서 value를 공유할 필요가 있을 때

class 변수를 가진 class 정의 
class Page:
    book_title = 'Python Practice Book' # self가 없는 변수 -> class 변수
    def __init__(self,num):
    self.num = num # self가 있는 변수 -> instance 변수 

static method (함수처럼 동작하는 method)

utility성 method (활용하는 method, instance까지 찍어낼 필요없이 사용한다는 컨셉 = lambda함수처럼 동작하는 method)
instance화 할 필요가 없음. 
정의한 클래스를 인스턴스로 선언해준 다음에 instance.method()로 사용되어야하지만 

super() #바로 위의 부모 class를 의미.
만일 다중상속을 했다면 어느 class를 지칭하는 것일까? 내부적으로 순서를 가지게 되어있음. 

MRO (Method Resolution Order)

super(class, instance): 명시적으로 클래스와 인스턴스를 지정하여 상위 클래스 메서드를 호출

추상클래스
구체적인 구현은 안되어있고 이름만 정의해뒀음. 
값도 있고 기능도 있음.
정의만 되어있는게 한개라도 있으면 추상 클래스라고 함. 
뼈대만 만드는 느낌?(class정의하고 method를 선언만 해주고 pass하는 느낌)
: 구현을 "상속받아서 쓰는 subclass"에서 해주어야 함. 

인터페이스(interface) 
모든게 다 정의만 되었고 구체적인 구현은 subclass에서 해야함. 

import sys
from pathlib import Path